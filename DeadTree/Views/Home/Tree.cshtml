@model IEnumerable<DeadTree.Models.DBClass.QuestionsModel>

@using DeadTree.Models.ViewModels
@{
    ViewData["Title"] = "树状知识图谱 森林Ver";

    var nodes = new List<TreeNodeViewModel>();

    nodes.Add(new TreeNodeViewModel() { name = "轮胎漏气" });
    nodes.Add(new TreeNodeViewModel() { name = "OR" });
    nodes.Add(new TreeNodeViewModel() { name = "温度" });
    nodes.Add(new TreeNodeViewModel() { name = "AND" });
    nodes.Add(new TreeNodeViewModel() { name = "导轴承" });
    nodes.Add(new TreeNodeViewModel() { name = "导轴承" });
    nodes.Add(new TreeNodeViewModel() { name = "导轴承" });
    nodes.Add(new TreeNodeViewModel() { name = "轴心" });

    //foreach(var item in Model)
    //{
    //    nodes.Add(new TreeNodeViewModel (){ name = item.FaultName.Name });
    //}
}

<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<div class="jumbotron" style="background-color:deepskyblue">
    <h2 style="color:white">
        @ViewBag.Title
    </h2>
</div>

<script>
    var mynodes = [{ name: "轮胎漏气" }, { name: "OR" },
    { name: "温度" }, { name: "AND" }, { name: "导轴承" }, { name: "导轴承" }, { name: "导轴承" }, { name: "轴心" },
    { name: "功率" }, { name: "AND" }, { name: "导轴承" },
    { name: "转速" }, { name: "AND" }, { name: "导轴承" },
    { name: "OR" },
    { name: "轴线摆度超标" }, { name: "AND" }, { name: "轴心" }, { name: "轴心" },
    { name: "堵塞" }, { name: "AND" }, { name: "导轴承" }];

    var myedges = [{ source: 0, target: 1 }, { source: 0, target: 14 },
    { source: 1, target: 2 }, { source: 2, target: 3 },
    { source: 3, target: 4 }, { source: 3, target: 5 }, { source: 3, target: 6 }, { source: 3, target: 7 },
    { source: 1, target: 8 }, { source: 8, target: 9 },
    { source: 9, target: 10 },
    { source: 1, target: 11 }, { source: 11, target: 12 },
    { source: 12, target: 13 },
    { source: 14, target: 15 }, { source: 15, target: 16 }, { source: 16, target: 17 }, { source: 16, target: 18 },
    { source: 14, target: 19 }, { source: 19, target: 20 }, { source: 20, target: 21 }];
</script>

<button class="btn btn-block btn-primary" onclick="startDrawing(mynodes, myedges)">绘制！</button>

<svg class="col-md-12">

</svg>

<script>
    function startDrawing(nodes, edges) {
        var svg = d3.select("svg")     //选择文档中的body元素
            // .append("svg")          //添加一个svg元素
            .attr("width", 800)       //设定宽度
            .attr("height", 720);    //设定高度

        var force = d3.layout.force()
            .nodes(nodes) //指定节点数组
            .links(edges) //指定连线数组
            .size([400, 600]) //指定作用域范围
            .linkDistance(150) //指定连线长度
            .charge([-400]); //相互之间的作用力

        force.start();    //开始作用

        //添加连线
        var svg_edges = svg.selectAll("line")
            .data(edges)
            .enter()
            .append("line")
            .style("stroke", "#ccc")
            .style("stroke-width", 1);

        var color = d3.scale.category20();

        //添加节点
        var svg_nodes = svg.selectAll("circle")
            .data(nodes)
            .enter()
            .append("circle")
            .attr("r", 20)
            .style("fill", function (d, i) {
                return color(i);
            })
            .call(force.drag);  //使得节点能够拖动

        //添加描述节点的文字
        var svg_texts = svg.selectAll("text")
            .data(nodes)
            .enter()
            .append("text")
            .style("fill", "black")
            .attr("dx", 20)
            .attr("dy", 8)
            .text(function (d) {
                return d.name;
            });

        force.on("tick", function () { //对于每一个时间间隔
            //更新连线坐标
            svg_edges.attr("x1", function (d) { return d.source.x; })
                .attr("y1", function (d) { return d.source.y; })
                .attr("x2", function (d) { return d.target.x; })
                .attr("y2", function (d) { return d.target.y; });

            //更新节点坐标
            svg_nodes.attr("cx", function (d) { return d.x; })
                .attr("cy", function (d) { return d.y; });

            //更新文字坐标
            svg_texts.attr("x", function (d) { return d.x; })
                .attr("y", function (d) { return d.y; });
        });

    }

</script> 