@model IEnumerable<DeadTree.Models.DBClass.QuestionsModel>

@{
    ViewData["Title"] = "树状知识图谱 融合算法Ver1.0";

    var BigFeatures = new List<DeadTree.Models.DBClass.FeaturesMappingModel>();
    var BigResults = new List<DeadTree.Models.DBClass.ResultsMappingModel>();

    foreach (var item in Model)
    {
        BigFeatures.AddRange(item.FeaturesMappings);
        BigResults.AddRange(item.ResultsMappings);
    }

    for (int i = 0; i < BigFeatures.Count - 1; i++)
    {
        var item = BigFeatures[i];
        for (int j = i + 1; j < BigFeatures.Count; j++)
        {
            var jtem = BigFeatures[j];
            if (item.FaultFeatures == jtem.FaultFeatures && item.Component == jtem.Component && item.Description == jtem.Description)
            {
                BigFeatures.Remove(item);
                i--;
            }
        }

    }

    for (int i = 0; i < BigResults.Count - 1; i++)
    {
        var item = BigResults[i];
        for (int j = i + 1; j < BigResults.Count; j++)
        {
            var jtem = BigResults[j];

            if (item.FaultResults == jtem.FaultResults && item.Component == jtem.Component)
            {
                BigResults[j].Probability += item.Probability;
                BigResults.Remove(item);
                i--;
            }
        }

    }

    var featuresGroup = BigFeatures.GroupBy(x => x.FFId);
    var resultsGroup = BigResults.GroupBy(x => x.FRId);

    var quest = Model.FirstOrDefault() == null ? "" : Model.FirstOrDefault().FaultName.Name;

    var AllProbability = 0.0;

    foreach (var item in resultsGroup)
    {
        foreach (var line in item)
        {
            AllProbability += line.Probability;
        }
    }

    if (AllProbability == 0.0) {
        AllProbability = 1.0;
    }
}

<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<FaultName hidden="hidden">
    @quest
</FaultName>

<FaultFeaturesCount hidden="hidden">
    @featuresGroup.Count()
</FaultFeaturesCount>

<FaultResultsCount hidden="hidden">
    @resultsGroup.Count()
</FaultResultsCount>

<div class="jumbotron" style="background-color:deepskyblue">
    <h2 style="color:white">
        @ViewBag.Title
    </h2>
    <p class="lead">
    </p>
</div>

<div>
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#inve" aria-controls="inve" role="tab" data-toggle="tab">全部故障表征</a></li>
        <li role="presentation"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">全部故障原因</a></li>
        <li role="presentation"><a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">全部应对方案</a></li>
    </ul>
    <div class="tab-content">

        <div role="tabpanel" class="tab-pane fade in active" id="inve">

            <div class="panel panel-danger">


                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                特征项
                            </th>
                            <th>
                                相关元件
                            </th>
                            <th>
                                描述
                            </th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in featuresGroup)
                        {
                            var a = item.Count() + 1;
                            <tr>
                                <td name="FeaturesName" rowspan=@a>
                                    @item.First().FaultFeatures.Name
                                </td>
                            </tr>

                            foreach (var line in item)
                            {
                                <tr>
                                    <td>
                                        @line.Component.Name
                                    </td>

                                    <td>
                                        <a asp-action="Edit" asp-controller="FeaturesMappingModels" asp-route-id="@line.FMId">@Html.DisplayFor(modelItem => line.Description)</a>
                                    </td>
                                </tr>

                                <hit hidden="hidden" name="FeaturesComponentNameAndDescription">
                                    @line.Component.Name - @line.Description
                                </hit>
                            }

                            <hit hidden="hidden" name="FeaturesComponentNumber">
                                @item.Count()
                            </hit>
                        }

                    </tbody>
                </table>

            </div>

        </div>

        <div role="tabpanel" class="tab-pane fade" id="home">
            <div class="panel panel-danger">

                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>
                                原因项
                            </th>
                            <th>
                                相关元件
                            </th>
                            <th>
                                概率
                            </th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in resultsGroup)
                        {
                            var a = item.Count() + 1;

                            <tr>
                                <td name="ResultsName" rowspan=@a>
                                    @item.First().FaultResults.Result
                                </td>
                            </tr>

                            foreach (var line in item)
                            {
                                var prop = (line.Probability / AllProbability).ToString("p");
                                <tr>
                                    <td>
                                        @line.Component.Name
                                    </td>
                                    <td>
                                        <a asp-action="Edit" asp-controller="ResultsMappingModels" asp-route-id="@line.RMId">@prop</a>
                                    </td>
                                </tr>

                                <hit hidden="hidden" name="ResultsComponentNameAndDescription">
                                    @line.Component.Name - @prop
                                </hit>
                            }

                            <hit hidden="hidden" name="ResultsComponentNumber">
                                @item.Count()
                            </hit>
                        }
                    </tbody>
                </table>

            </div>
        </div>

        <div role="tabpanel" class="tab-pane fade" id="profile">
            @foreach (var item in Model)
            {
                <div class="panel panel-info">
                    <div class="panel-heading">@item.Professor.Name</div>
                    <div class="panel-body">
                        @item.Answer
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    var mynodes = new Array();

    mynodes.push({ name: d3.select("FaultName").text().trim(), color: "cornflowerblue" });
    mynodes.push({ name: "OR", color: "orangered" });
    mynodes.push({ name: "OR", color: "darkseagreen" });

    var FeaturesNameArray = document.getElementsByName("FeaturesName");

    FeaturesNameArray.forEach(v => {
        mynodes.push({ name: v.innerText.trim(), color: "lightgray" });
        mynodes.push({ name: "AND", color: "lightpink" });
    });

    var FeaturesComponentNameAndDescriptionArray = document.getElementsByName("FeaturesComponentNameAndDescription");

    FeaturesComponentNameAndDescriptionArray.forEach(v => {
        mynodes.push({ name: v.innerText.trim(), color: "orange" });
    });

    var FeaturesComponentNumberArray = new Array();

    document.getElementsByName("FeaturesComponentNumber").forEach(v => {
        FeaturesComponentNumberArray.push(parseInt(v.innerText.trim()));
    });

    //------------------------------------------------//

    var myedges = new Array();

    myedges.push({ source: 0, target: 1 });
    myedges.push({ source: 0, target: 2 });

    var counter = 1 + 2 + FeaturesNameArray.length * 2;

    //3-1 5-1 7-1

    for (var i = 0; i < FeaturesNameArray.length; i++) {
        myedges.push({ source: 3 + i * 2, target: 1 });
        myedges.push({ source: 4 + i * 2, target: 3 + i * 2 });

        for (var j = 0; j < FeaturesComponentNumberArray[i]; j++) {
            myedges.push({ source: counter++, target: 4 + i * 2, });
        }
    }

    //---------------------特征------------结果------------------------//

    var ResultsNameArray = document.getElementsByName("ResultsName");

    ResultsNameArray.forEach(v => {
        mynodes.push({ name: v.innerText.trim(), color: "slateblue" });
        mynodes.push({ name: "AND", color: "lightpink" });
    });

    var ResultsComponentNameAndDescriptionArray = document.getElementsByName("ResultsComponentNameAndDescription");

    ResultsComponentNameAndDescriptionArray.forEach(v => {
        mynodes.push({ name: v.innerText.trim(), color: "orange" });
    });

    var ResultsComponentNumberArray = new Array();

    document.getElementsByName("ResultsComponentNumber").forEach(v => {
        ResultsComponentNumberArray.push(parseInt(v.innerText.trim()));
    });

    var oldCounter = counter;
    counter += ResultsNameArray.length * 2;

    console.log(counter);
    for (var i = 0; i < ResultsNameArray.length; i++) {
        myedges.push({ source: oldCounter + i * 2, target: 2 });
        myedges.push({ source: oldCounter + 1 + i * 2, target: oldCounter + i * 2 });

        for (var j = 0; j < ResultsComponentNumberArray[i]; j++) {
            myedges.push({ source: counter++, target: oldCounter + 1 + i * 2 });
        }
    }

    console.log(mynodes);
    console.log(myedges);
</script>

<div>
    <svg class="row">

    </svg>
</div>


<script>
    function startDrawing(nodes, edges) {
        var svg = d3.select("svg")     //选择文档中的body元素
            // .append("svg")          //添加一个svg元素
            .attr("width", 1200)       //设定宽度
            .attr("height", 1000);    //设定高度

        var force = d3.layout.force()
            .nodes(nodes) //指定节点数组
            .links(edges) //指定连线数组
            .size([1200, 1000]) //指定作用域范围
            .linkDistance(150) //指定连线长度
            .charge([-400]); //相互之间的作用力

        force.start();    //开始作用

        //添加连线
        var svg_edges = svg.selectAll("line")
            .data(edges)
            .enter()
            .append("line")
            .style("stroke", "#ccc")
            .style("stroke-width", 1);

        var color = d3.scale.category20();

        //添加节点
        var svg_nodes = svg.selectAll("circle")
            .data(nodes)
            .enter()
            .append("circle")
            .attr("r", 20)
            .style("fill", function (d, i) {
                //return color(i);
                return d.color;
            })
            .call(force.drag);  //使得节点能够拖动

        //添加描述节点的文字
        var svg_texts = svg.selectAll("text")
            .data(nodes)
            .enter()
            .append("text")
            .style("fill", "black")
            .attr("dx", 20)
            .attr("dy", 8)
            .text(function (d) {
                return d.name;
            });

        force.on("tick", function () { //对于每一个时间间隔
            //更新连线坐标
            svg_edges.attr("x1", function (d) { return d.source.x; })
                .attr("y1", function (d) { return d.source.y; })
                .attr("x2", function (d) { return d.target.x; })
                .attr("y2", function (d) { return d.target.y; });

            //更新节点坐标
            svg_nodes.attr("cx", function (d) { return d.x; })
                .attr("cy", function (d) { return d.y; });

            //更新文字坐标
            svg_texts.attr("x", function (d) { return d.x; })
                .attr("y", function (d) { return d.y; });
        });

    }

    startDrawing(mynodes, myedges);
</script>