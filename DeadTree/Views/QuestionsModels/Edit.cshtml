@model DeadTree.Models.DBClass.QuestionsModel

@{
    ViewData["Title"] = "请问\"" + Model.FaultName.Name + "\"的特征是什么？";

    var featuresGroup = Model.FeaturesMappings.GroupBy(x => x.FFId);
    var resultsGroup = Model.ResultsMappings.GroupBy(x => x.FRId);
}

<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<FaultName hidden="hidden">
    @Model.FaultName.Name
</FaultName>

<FaultFeaturesCount hidden="hidden">
    @featuresGroup.Count()
</FaultFeaturesCount>

<FaultResultsCount hidden="hidden">
    @resultsGroup.Count()
</FaultResultsCount>

<div class="jumbotron" style="background-color:deepskyblue">
    <h2 style="color:white">
        @ViewBag.Title
    </h2>
</div>

<div class="row">
    <form asp-action="Edit">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="QId" />
        <input type="hidden" asp-for="PId" />
        <input type="hidden" asp-for="FNId" />
        <div>
            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active"><a href="#inve" aria-controls="inve" role="tab" data-toggle="tab">故障表征</a></li>
                <li role="presentation"><a href="#home" aria-controls="home" role="tab" data-toggle="tab">故障原因</a></li>
                <li role="presentation"><a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">应对方案</a></li>
            </ul>
            <div class="tab-content">

                <div role="tabpanel" class="tab-pane fade in active" id="inve">

                    <div class="panel panel-danger">


                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>
                                        特征项
                                    </th>
                                    <th>
                                        相关元件
                                    </th>
                                    <th>
                                        描述
                                    </th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var item in featuresGroup)
                                {
                                    var a = item.Count() + 1;
                                    <tr>
                                        <td name="FeaturesName" rowspan=@a>
                                            @item.First().FaultFeatures.Name
                                        </td>
                                    </tr>

                                    foreach (var line in item)
                                    {
                                        <tr>
                                            <td>
                                                @line.Component.Name
                                            </td>

                                            <td>
                                                <a asp-action="Edit" asp-controller="FeaturesMappingModels" asp-route-id="@line.FMId">@Html.DisplayFor(modelItem => line.Description)</a>
                                            </td>
                                        </tr>

                                        <hit hidden="hidden" name="FeaturesComponentNameAndDescription">
                                            @line.Component.Name - @line.Description
                                        </hit>
                                    }

                                    <hit hidden="hidden" name="FeaturesComponentNumber">
                                        @item.Count()
                                    </hit>
                                }

                            </tbody>
                        </table>

                        <div class="panel-footer">
                            @Html.ActionLink("添加故障特征映射", "CreateInQuestion", "FeaturesMappingModels", routeValues: new { id = Model.QId }, htmlAttributes: new { @class = "btn btn-block btn-danger" })
                        </div>

                    </div>

                </div>

                <div role="tabpanel" class="tab-pane fade" id="home">
                    <div class="panel panel-danger">

                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>
                                        原因项
                                    </th>
                                    <th>
                                        相关元件
                                    </th>
                                    <th>
                                        概率
                                    </th>
                                </tr>
                            </thead>
                            <tbody>

                                @foreach (var item in resultsGroup)
                                {
                                    var a = item.Count() + 1;
                                    <tr>
                                        <td rowspan=@a>
                                            @item.First().FaultResults.Result
                                        </td>
                                    </tr>
                                    foreach (var line in item)
                                    {
                                        <tr>
                                            <td>
                                                @line.Component.Name
                                            </td>
                                            <td>
                                                <a asp-action="Edit" asp-controller="ResultsMappingModels" asp-route-id="@line.RMId">@Html.DisplayFor(modelItem => line.Probability)</a>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <div class="panel-footer">
                            @Html.ActionLink("添加故障原因映射", "CreateInQuestion", "ResultsMappingModels", routeValues: new { id = Model.QId }, htmlAttributes: new { @class = "btn btn-block btn-warning" })
                        </div>
                    </div>
                </div>

                <div role="tabpanel" class="tab-pane fade" id="profile">
                    <div class="form-group">
                        <label asp-for="Answer" class="control-label"></label>
                        <textarea asp-for="Answer" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Answer" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <input type="submit" value="保存" class="btn btn-block btn-primary" />
                    </div>
                </div>

            </div>
        </div>
    </form>
</div>

<script>

    //function node(name) {
    //    this.name = name;
    //}

    var mynodes = new Array();

    mynodes.push({ name: d3.select("FaultName").text().trim() });
    mynodes.push({ name: "OR" });
    mynodes.push({ name: "OR" });

    var FeaturesNameArray = document.getElementsByName("FeaturesName");

    FeaturesNameArray.forEach(v => {
        mynodes.push({ name: v.innerText.trim() });
        mynodes.push({ name: "AND" });
    });

    var FeaturesComponentNameAndDescriptionArray = document.getElementsByName("FeaturesComponentNameAndDescription");

    FeaturesComponentNameAndDescriptionArray.forEach(v => {
        mynodes.push({ name: v.innerText.trim() });
    });

    var FeaturesComponentNumberArray = new Array();

    document.getElementsByName("FeaturesComponentNumber").forEach(v => {
        FeaturesComponentNumberArray.push(parseInt(v.innerText.trim()));
    });

    //------------------------------------------------//

    var myedges = new Array();

    myedges.push({ source: 0, target: 1 });
    myedges.push({ source: 0, target: 2 });

    var counter = 1 + 2 + FeaturesNameArray.length * 2;

    //3-1 5-1 7-1

    for (var i = 0; i < FeaturesNameArray.length; i++) {
        myedges.push({ source: 3 + i * 2, target: 1 });
        myedges.push({ source: 4 + i * 2, target: 3 + i * 2 });

        for (var j = 0; j < FeaturesComponentNumberArray[i]; j++) {
            myedges.push({ source: counter++, target: 4 + i * 2, });
        }
    }

    console.log(myedges);
</script>

<div>
    <button class="btn btn-block btn-primary" onclick="startDrawing(mynodes, myedges)">绘制！</button>

    <svg class="col-md-12">

    </svg>
</div>


<script>
    function startDrawing(nodes, edges) {
        var svg = d3.select("svg")     //选择文档中的body元素
            // .append("svg")          //添加一个svg元素
            .attr("width", 800)       //设定宽度
            .attr("height", 720);    //设定高度

        var force = d3.layout.force()
            .nodes(nodes) //指定节点数组
            .links(edges) //指定连线数组
            .size([800, 720]) //指定作用域范围
            .linkDistance(150) //指定连线长度
            .charge([-400]); //相互之间的作用力

        force.start();    //开始作用

        //添加连线
        var svg_edges = svg.selectAll("line")
            .data(edges)
            .enter()
            .append("line")
            .style("stroke", "#ccc")
            .style("stroke-width", 1);

        var color = d3.scale.category20();

        //添加节点
        var svg_nodes = svg.selectAll("circle")
            .data(nodes)
            .enter()
            .append("circle")
            .attr("r", 20)
            .style("fill", function (d, i) {
                return color(i);
            })
            .call(force.drag);  //使得节点能够拖动

        //添加描述节点的文字
        var svg_texts = svg.selectAll("text")
            .data(nodes)
            .enter()
            .append("text")
            .style("fill", "black")
            .attr("dx", 20)
            .attr("dy", 8)
            .text(function (d) {
                return d.name;
            });

        force.on("tick", function () { //对于每一个时间间隔
            //更新连线坐标
            svg_edges.attr("x1", function (d) { return d.source.x; })
                .attr("y1", function (d) { return d.source.y; })
                .attr("x2", function (d) { return d.target.x; })
                .attr("y2", function (d) { return d.target.y; });

            //更新节点坐标
            svg_nodes.attr("cx", function (d) { return d.x; })
                .attr("cy", function (d) { return d.y; });

            //更新文字坐标
            svg_texts.attr("x", function (d) { return d.x; })
                .attr("y", function (d) { return d.y; });
        });

    }

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
